// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.PowerUp2018.subsystems;

import org.usfirst.frc4980.PowerUp2018.OI;
import org.usfirst.frc4980.PowerUp2018.Robot;
import org.usfirst.frc4980.PowerUp2018.RobotMap;
import org.usfirst.frc4980.PowerUp2018.commands.*;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveSystem extends Subsystem implements PIDOutput {
	public boolean invert = false;
	PIDController controller;
	 double rotateToAngleRate;
	  static final double kP = 0.03;
	  static final double kI = 0.00;
	  static final double kD = 0.00;
	  static final double kF = 0.00;
	  static final double kToleranceDegrees = 5.0f;
	  
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	private final Talon frontLeftMotor = RobotMap.driveSystemfrontLeftMotor;
    private final Talon frontRightMotor = RobotMap.driveSystemfrontRightMotor;
    private final Talon backLeftMotor = RobotMap.driveSystembackLeftMotor;
    private final Talon backRightMotor = RobotMap.driveSystembackRightMotor;

    public boolean invert = false;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public void setUpPIDController(){
    	controller = new PIDController(kP, kI, kD, kF, Robot.ahrs, this);
    	controller.setInputRange(-180.0f,  180.0f);
    	controller.setOutputRange(-1.0, 1.0);
    	controller.setAbsoluteTolerance(kToleranceDegrees);
    	controller.setContinuous(true);
    }
    public void enablePIDController(){
    	controller.enable();
    }
    public void disablePIDController(){
    	controller.disable();
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new cmdDriveXbox());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    public void tankDriveXbox() {
    	double left = - Robot.oi.xboxController.getRawAxis(1);
    	double right = Robot.oi.xboxController.getRawAxis(5);
    	Robot.driveSystem.frontRightMotor.set(right);
    	frontLeftMotor.set(left);
    	frontRightMotor.set(right);
   	    backRightMotor.set(right);
   	    backLeftMotor.set(left);
    	
    }
    public void rotate( double speed){
    	frontLeftMotor.set(-speed);
    	frontRightMotor.set(-speed);
   	    backRightMotor.set(speed);
   	    backLeftMotor.set(speed);
    	// TODO: Make robot turn in angle degrees
    }
    public void rotateToAngle(double angle){
    	rotate(rotateToAngleRate);
    	controller.setSetpoint(angle);
    }
  //Current Time = t
    //Start Value = b
    //Change in value = c
    //Duration = d
    public double easeIn(double t, double b, double c, double d) {
	   t = t/d;
	   return c*t*t+b;
   }
    
    public double easeOut(double t, double b, double c, double d){
    	t=t/d;
    	return -c*t*(t-2.0)+b;
    }
    public double easeInOut(double t, double b, double c, double d){
    	t/=d/2.0;
    	if(t<1){
    		return c/2.0*t*t+b;
    	}
    	return -c/2.0*((--t)*(t-2)-1)+b;
    }
	@Override
	public void pidWrite(double output) {
		// TODO Auto-generated method stub
		rotateToAngleRate = output;
	}
	public void drive(double speed){
		frontLeftMotor.set(speed);
		backLeftMotor.set(speed);
		frontRightMotor.set(speed);
		backRightMotor.set(speed);
	}

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

