// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.PowerUp2018;

import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.kauailabs.navx.frc.AHRS;

import org.usfirst.frc4980.PowerUp2018.commands.*;
import org.usfirst.frc4980.PowerUp2018.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */

public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<Command>();
    SendableChooser leftScaleChooser = new SendableChooser();
    SendableChooser rightScaleChooser = new SendableChooser();
    SendableChooser leftSwitchChooser = new SendableChooser();
    SendableChooser rightSwitchChooser = new SendableChooser();
    SendableChooser positionChooser = new SendableChooser();
    
    public static OI oi;
    public static AHRS ahrs;
    public static SerialPort TFMini;
    public static Elevator elevator;
    public static Intake intake;
    public static Vision vision;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveSystem driveSystem;
 
		public NetworkTableInstance tableInstance;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        CameraServer.getInstance().startAutomaticCapture("cam0", 0);
        
        tableInstance = NetworkTableInstance.getDefault();
    	tableInstance.startClient("10.49.82.86", 1735);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystem = new driveSystem();
        
        vision = new Vision(tableInstance);
        LiveWindow.add(vision);
        
        elevator = new Elevator();
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intake = new Intake();
        double startingAngle;
        try {
        	ahrs = new AHRS(SPI.Port.kMXP);
        } catch(RuntimeException ex) {
        	DriverStation.reportError("Error instantiating navX-MXP"+ ex.getMessage(), true);
        }
        ahrs.reset();
        
        
        try {        	
//        	TFMini = new SerialPort(115200, SerialPort.Port.kOnboard, 8, SerialPort.Parity.kNone, SerialPort.StopBits.kOne);
//        	TFMini.setReadBufferSize(10);
            //TFMini.reset();
        } catch(RuntimeException ex) {
        	DriverStation.reportError("Error instantiating elevator controller"+ ex.getMessage(), true);
        }
        startingAngle = ahrs.getAngle();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI(tableInstance);
        
//        SmartDashboard.putData("S Curve Auto", new cgSCurve());
//        SmartDashboard.putData("Drive Forward", new cgAutoDriveForward() );
//        SmartDashboard.putData("Center Left Switch Auto", new cgCenterAutoLeft());
//        SmartDashboard.putData("Center Pos Right Switch Auto", new cgCenterAutoRight());
//        SmartDashboard.putData("Left Pos Left Switch", new cgLeftAutoLeft());
//        SmartDashboard.putData("Left Pos Right Switch", new cgLeftAutoRight());
//        SmartDashboard.putData("Left Pos Left Scale", new cgLeftScaleAutoLeft());
//        SmartDashboard.putData("Left Pos Right Scale", new cgLeftScaleAutoRight());
//        SmartDashboard.putData("Right Pos Left Switch", new cgRightAutoLeft());
//        SmartDashboard.putData("Right Pos Right Switch", new cgRightAutoRight());
//        SmartDashboard.putData("Right Pos Left Scale", new cgRightScaleAutoLeft());
//        SmartDashboard.putData("Right Pos Right Scale", new cgRightScaleAutoRight());
//        SmartDashboard.putData("Climbing Height", new cmdElevatorClimbHeight());

        positionChooser.addDefault("Left Position", Position.left);
        positionChooser.addDefault("Center Position", Position.center);
        positionChooser.addDefault("Right Position", Position.right);
        
        leftScaleChooser.addDefault("0", Priority.zero);
        leftScaleChooser.addDefault("1", Priority.one);
        leftScaleChooser.addDefault("2", Priority.two);
        leftScaleChooser.addDefault("3", Priority.three);
        leftScaleChooser.addDefault("4", Priority.four);
        
        rightScaleChooser.addDefault("0", Priority.zero);
        rightScaleChooser.addDefault("1", Priority.one);
        rightScaleChooser.addDefault("2", Priority.two);
        rightScaleChooser.addDefault("3", Priority.three);
        rightScaleChooser.addDefault("4", Priority.four);
        
        leftSwitchChooser.addDefault("0", Priority.zero);
        leftSwitchChooser.addDefault("1", Priority.one);
        leftSwitchChooser.addDefault("2", Priority.two);
        leftSwitchChooser.addDefault("3", Priority.three);
        leftSwitchChooser.addDefault("4", Priority.four);
        
        rightSwitchChooser.addDefault("0", Priority.zero);
        rightSwitchChooser.addDefault("1", Priority.one);
        rightSwitchChooser.addDefault("2", Priority.two);
        rightSwitchChooser.addDefault("3", Priority.three);
        rightSwitchChooser.addDefault("4", Priority.four);
        
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

       // chooser.addDefault("Autonomous Command", new AutonomousCommand());
//        chooser.addDefault("S Curve Right", new cgSCurve());
//        chooser.addDefault("Drive Forward", new cgAutoDriveForward());
//        chooser.addDefault("Center Pos Left Switch", new cgCenterAutoLeft());
//        chooser.addDefault("Center Pos Right Switch", new cgCenterAutoRight());
//        chooser.addDefault("Left Pos Left Switch", new cgLeftAutoLeft());
//        chooser.addDefault("Left Pos Right Switch", new cgLeftAutoRight());
//        chooser.addDefault("Left Pos Left Scale", new cgLeftScaleAutoLeft());
//        chooser.addDefault("Left Pos Right Scale", new cgLeftScaleAutoRight());
//        chooser.addDefault("Right Pos Left Switch", new cgRightAutoLeft());
//        chooser.addDefault("Right Pos Right Switch", new cgRightAutoRight());
//        chooser.addDefault("Right Pos Left Scale", new cgRightScaleAutoLeft());
//        chooser.addDefault("Right Pos Right Scale", new cgRightScaleAutoRight());

       
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        SmartDashboard.putData("Left Scale", leftScaleChooser);
        SmartDashboard.putData("Right Scale", rightScaleChooser);
        SmartDashboard.putData("Left Switch", leftSwitchChooser);
        SmartDashboard.putData("Right Switch", rightSwitchChooser);
        SmartDashboard.putData("Position", positionChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	Position position = (Position) positionChooser.getSelected();
    	Priority prioritySwitch;
    	Priority priorityScale;
    	boolean isScaleLeft = true;
    	boolean isSwitchLeft = true;
    	String gameData;
		gameData = DriverStation.getInstance().getGameSpecificMessage();
       if(gameData.length() > 0)
        {
    	  isSwitchLeft = gameData.charAt(0) == 'L';
    	  isScaleLeft = gameData.charAt(1) == 'L';
    	  if(isSwitchLeft){
    		  prioritySwitch = (Priority) leftSwitchChooser.getSelected();
    	  }else{
    		  prioritySwitch = (Priority) rightSwitchChooser.getSelected();
    	  }
    	  
    	  if(isScaleLeft){
    		  priorityScale = (Priority)leftScaleChooser.getSelected();
    	  }else{
    		  priorityScale = (Priority)rightScaleChooser.getSelected();
    	  }
    	  if(isScaleLeft && isSwitchLeft && position == Position.right){
    		  //Drive Forward only
    		  autonomousCommand = new cgAutoDriveForward();
    		  if (autonomousCommand != null) autonomousCommand.start();
    		  return;
    	  }
    	  if(!isScaleLeft && !isSwitchLeft && position == Position.left){
    		  //Drive Forward only
    		  autonomousCommand = new cgAutoDriveForward();
    		  if (autonomousCommand != null) autonomousCommand.start();
    		  return;
    	  }
    	  
    	   if(position == Position.left ){
    		  // SmartDashboard.putString("Auto", "Position Left");
    		  if(prioritySwitch.compareTo(priorityScale)< 0 && prioritySwitch.compareTo(Priority.zero) != 0){
    			  if(isSwitchLeft){
    				  autonomousCommand = new cgLeftAutoLeft();
    			  }else {
    				  autonomousCommand = new cgLeftAutoRight();
    			  }
    		  }else if(priorityScale.compareTo(prioritySwitch)< 0 && priorityScale.compareTo(Priority.zero) != 0){
    			  if(isScaleLeft){
    				  autonomousCommand = new cgLeftScaleAutoLeft();
    			  } else {
    				  autonomousCommand = new cgLeftScaleAutoRight();
    			  }
    		  } else {
    			  autonomousCommand = new cgAutoDriveForward();
    		  }
    	   } else if(position == Position.center){
    		 //  SmartDashboard.putString("Auto", "Position Center");
    		   if(isSwitchLeft){
    			   autonomousCommand = new cgCenterAutoLeft();
    		   }else{
    			   autonomousCommand = new cgCenterAutoRight();
    		   }
    	   } else if(position == Position.right){
    		  // SmartDashboard.putString("Auto", "Position Right");
    		   if(prioritySwitch.compareTo(priorityScale)< 0 && prioritySwitch.compareTo(Priority.zero) != 0){
     			  if(isSwitchLeft){
     				  autonomousCommand = new cgRightAutoLeft();
     			  }else {
     				  autonomousCommand = new cgRightAutoRight();
     			  }
     		  }else if(priorityScale.compareTo(prioritySwitch)< 0 && priorityScale.compareTo(Priority.zero) != 0){
     			  if(isScaleLeft){
     				  autonomousCommand = new cgRightScaleAutoLeft();
     			  } else {
     				  autonomousCommand = new cgRightScaleAutoRight();
     			  }
     		  } else {
     			  autonomousCommand = new cgAutoDriveForward();
     		  }
    	   }
//		  if(gameData.charAt(0) == 'L')
//		  {
//			//Put left auto code here
//		  } else {
//			//Put right auto code here
//		  }
        }
    	//autonomousCommand = chooser.getSelected();
       SmartDashboard.putData("Autonomous Command", autonomousCommand);
       
        // schedule the autonomous command (example)
       if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
    	ahrs.reset();
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
    	SmartDashboard.putData("Intake", Robot.intake );
        SmartDashboard.putData("Drive System", Robot.driveSystem );
        SmartDashboard.putData("Vision", Robot.vision );
        SmartDashboard.putData("Elevator", Robot.elevator );
        SmartDashboard.putNumber("IntakeState", Robot.intake.intakeState);
        Scheduler.getInstance().run();
        SmartDashboard.putNumber( "IMU_TotalYaw", ahrs.getAngle());
        SmartDashboard.putNumber( "IMU_TotalYaw", ahrs.getYaw());
        double volts = RobotMap.cubeDistance.getAverageVoltage();
        SmartDashboard.putNumber("cubeDistance", volts);
        SmartDashboard.putNumber("Elevator Pot", RobotMap.pot.getVoltage());
    }
    public void free(){
    	TFMini.free();
    	System.out.println("Free");
    	super.free();
    }
}
