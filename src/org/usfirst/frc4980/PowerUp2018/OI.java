// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.PowerUp2018;

import java.awt.Point;

import org.usfirst.frc4980.PowerUp2018.commands.*;

import edu.wpi.first.networktables.EntryListenerFlags;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NetworkTableValue;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton buttonA;
    public Joystick xboxDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton leftBumper;
    public JoystickButton rightBumper;
    public JoystickButton back;
    public JoystickButton start;
    public JoystickButton buttonX2;
    public JoystickButton buttonY;
    public JoystickButton buttonA2;
    public JoystickButton buttonB2;
    public JoystickButton buttonY2;
    public JoystickButton rightBumper2;
    public JoystickButton leftBumper2;
    public JoystickButton start2;
    public Joystick xboxDriver2;
    
    public NetworkTable visionTable;
    double h;
    double s;
    double v;
    
    
    public OI(NetworkTableInstance tableInstance) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xboxDriver = new Joystick(0);
        xboxDriver2 = new Joystick(1);

        // SmartDashboard Buttons
        //SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("drive", new cmdDriveXbox());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       
        h = SmartDashboard.getNumber("h_Value", 51); 
        s = SmartDashboard.getNumber("s_Value", 52); 
        v = SmartDashboard.getNumber("v_Value", 53); 
        
        leftBumper = new JoystickButton(xboxDriver, 5);
        leftBumper.whileHeld(new cmdDriveSearchLeft());

        rightBumper = new JoystickButton(xboxDriver, 6);
        rightBumper.whileHeld(new cmdDriveSearchRight());
        
        rightBumper2 = new JoystickButton(xboxDriver2, 6);
        rightBumper2.whenPressed(new cmdTogglePivot());

        back = new JoystickButton(xboxDriver, 7);
        back.whenPressed(new toggleInvert());
        
        buttonX2 = new JoystickButton(xboxDriver2, 3);
        buttonX2.whenPressed(new cmdIntakeToggleLeft());
        
        start = new JoystickButton(xboxDriver, 8);
        start.whenPressed(new cmdVisionChangeState());
        
        buttonB2 = new JoystickButton(xboxDriver2, 2);
        buttonB2.whenPressed(new cmdIntakeToggleRight());
        
        buttonA = new JoystickButton(xboxDriver, 1);
        buttonA.whileHeld(new cmdIntakeCubeCapture());
        
        buttonA2 = new JoystickButton(xboxDriver2, 1);
        buttonA2.whenPressed(new cmdToggleCubePinch());

        buttonY = new JoystickButton(xboxDriver, 4);
        buttonY.whenPressed(new cmdVisionIncrement());
        
        buttonY2 = new JoystickButton(xboxDriver2, 4);
        buttonY2.whileHeld(new cmdToggleElevatorCubeDeposit());
        
        leftBumper2 = new JoystickButton(xboxDriver2, 5);
        leftBumper2.whileHeld(new cmdIntakeCubeCapture());
    
        start2 = new JoystickButton(xboxDriver2, 8);
        start2.whenPressed(new cmdCubeHold());
        
        visionTable = tableInstance.getTable("CVResultsTable");
        visionTable.addEntryListener("VisionResults", OI::VisionResultsChanged, EntryListenerFlags.kUpdate);
        
        

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxboxController() {
        return xboxDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public static void VisionResultsChanged(NetworkTable table, String key, NetworkTableEntry entry, NetworkTableValue value, int flags) {
    	String[] values = value.getString().split(",");
    	if (Integer.decode(values[1]) == 0) { cubeCoords.valid = false; return; }
    	
    	cubeCoords.valid = true;
    	cubeCoords.midpoint_x = Integer.decode(values[2]);
    	cubeCoords.midpoint_y = Integer.decode(values[3]);
    	cubeCoords.horizontalAngle = Double.parseDouble(values[16]);
   
    }
    public static class cubeCoords{
    	public static boolean valid = false;
    	public static int midpoint_x;
    	public static int midpoint_y;
    	public static double horizontalAngle;
    }
}

