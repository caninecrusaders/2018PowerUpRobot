// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.PowerUp2018;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.interfaces.Potentiometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    
	public static WPI_TalonSRX driveSystemfrontLeftMotor;
    public static WPI_TalonSRX driveSystemfrontRightMotor;
    public static WPI_TalonSRX driveSystembackLeftMotor;
    public static WPI_TalonSRX driveSystembackRightMotor;
    public static WPI_TalonSRX intakeMotor1;
    public static WPI_TalonSRX intakeMotor2;
    public static WPI_TalonSRX elevatorMotor;
    public static WPI_TalonSRX ElevatorMotor2;
    public static WPI_TalonSRX turretMotor;
    public static DoubleSolenoid armSolenoidLeft;
    public static DoubleSolenoid armSolenoidRight;
    public static DoubleSolenoid elevatorDepositSolenoid;
    public static Compressor compressor;
    public static DoubleSolenoid elevatorHolder;
    public static AnalogInput pot;
    public static DoubleSolenoid cubeArmPivot;
    public static AnalogInput cubeDistance;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @SuppressWarnings("deprecation")
	public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
          // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	driveSystemfrontLeftMotor = new WPI_TalonSRX(4);
        driveSystemfrontLeftMotor.setInverted(false);
        LiveWindow.add(driveSystemfrontLeftMotor);
        
        
        driveSystemfrontRightMotor = new WPI_TalonSRX(5);
        driveSystemfrontRightMotor.setInverted(true);
        LiveWindow.add(driveSystemfrontRightMotor);
        
        driveSystembackLeftMotor = new WPI_TalonSRX(2);
        driveSystembackLeftMotor.setInverted(false);
        //driveSystembackLeftMotor.follow(driveSystemfrontLeftMotor);
        LiveWindow.add(driveSystembackLeftMotor);
        
        driveSystembackRightMotor = new WPI_TalonSRX(3);
        driveSystembackRightMotor.setInverted(true);
        //driveSystembackRightMotor.follow(driveSystemfrontRightMotor);
        LiveWindow.add(driveSystembackRightMotor);
       
        intakeMotor1 = new WPI_TalonSRX(6);
        LiveWindow.add(intakeMotor1);
        
        intakeMotor2 = new WPI_TalonSRX(7);
        LiveWindow.add(intakeMotor2);
        
        elevatorMotor = new WPI_TalonSRX(8);
        LiveWindow.add(elevatorMotor);
        
        ElevatorMotor2 = new WPI_TalonSRX(9);
        LiveWindow.add(ElevatorMotor2);
        
        armSolenoidLeft = new DoubleSolenoid(0,7);
        LiveWindow.add(armSolenoidLeft);
        
        armSolenoidRight = new DoubleSolenoid(3,4);
        LiveWindow.add(armSolenoidRight);
        
        elevatorDepositSolenoid = new DoubleSolenoid(1,6);
        LiveWindow.add(elevatorDepositSolenoid);
        
        elevatorHolder = new DoubleSolenoid(1,0,7);
        LiveWindow.add(elevatorHolder);
        
        cubeArmPivot = new DoubleSolenoid(2,5);
        LiveWindow.add(cubeArmPivot);
        
        compressor = new Compressor(0);
        compressor.setClosedLoopControl(true);
        LiveWindow.add(compressor);
        
        pot = new AnalogInput(1);
        
        cubeDistance = new AnalogInput(0);
//        pot = new AnalogInput(ai,360,30);
//        LiveWindow.add(pot);
    }
    
}
